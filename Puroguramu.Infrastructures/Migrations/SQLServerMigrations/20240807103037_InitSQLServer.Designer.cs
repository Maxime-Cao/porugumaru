// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Puroguramu.Infrastructures.Data;

#nullable disable

namespace Puroguramu.Infrastructures.Migrations.SQLServerMigrations
{
    [DbContext(typeof(PuroguramuDbContext))]
    [Migration("20240807103037_InitSQLServer")]
    partial class InitSQLServer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "MSI25-06-24 23:48:00Teacher",
                            ConcurrencyStamp = "MSI25-06-24 23:48:00Teacher",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "MSI25-06-24 23:48:00Student",
                            ConcurrencyStamp = "MSI25-06-24 23:48:00Student",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "MSI25-06-24 23:48:00Nicolas",
                            RoleId = "MSI25-06-24 23:48:00Teacher"
                        },
                        new
                        {
                            UserId = "MSI25-06-24 23:48:00Dorian",
                            RoleId = "MSI25-06-24 23:48:00Teacher"
                        },
                        new
                        {
                            UserId = "MSI25-06-24 23:48:00Maxime",
                            RoleId = "MSI25-06-24 23:48:00Student"
                        },
                        new
                        {
                            UserId = "MSI25-06-24 23:48:00Megan",
                            RoleId = "MSI25-06-24 23:48:00Student"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Puroguramu.Infrastructures.Data.EntityExercise", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stub")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ExerciseId");

                    b.HasIndex("LessonId", "Position")
                        .IsUnique();

                    b.HasIndex("LessonId", "Title")
                        .IsUnique();

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            ExerciseId = new Guid("12ba9d1b-49aa-4d51-9319-f1f70fbfd7b5"),
                            Difficulty = "Easy",
                            Instructions = "Créez une fonction Power C# prenant en paramètre une base b de type float et un exposant e de type int. Power(b, e) retourne le float b exposant e.",
                            IsPublished = true,
                            LessonId = new Guid("9b5de29a-2216-4992-82c0-6b0b02cccc52"),
                            Position = 1,
                            Solution = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            Stub = "public class Exercice\n{\n  // Tapez votre code ici\n}\n",
                            Template = "// code-insertion-point\n\npublic class Test\n{\n    public static TestResult Ensure(float b, int exponent, float expected)\n    {\n      TestStatus status = TestStatus.Passed;\n      float actual = float.NaN;\n      try\n      {\n         actual = Exercice.Power(b, exponent);\n         if(Math.Abs(actual - expected) > 0.00001f)\n         {\n             status = TestStatus.Failed;\n         }\n      }\n      catch(Exception ex)\n      {\n         status = TestStatus.Inconclusive;\n      }\n\n      return new TestResult(\n        string.Format(\"Power of {0} by {1} should be {2}\", b, exponent, expected),\n        status,\n        status == TestStatus.Passed ? string.Empty : string.Format(\"Expected {0}. Got {1}.\", expected, actual)\n      );\n    }\n}\n\nreturn new TestResult[] {\n  Test.Ensure(2, 4, 16.0f),\n  Test.Ensure(2, -4, 1.0f/16.0f)\n};\n",
                            Title = "Calcul de puissance en C# v1"
                        },
                        new
                        {
                            ExerciseId = new Guid("8566b6d9-1460-4517-b378-5eb763b1a11c"),
                            Difficulty = "Medium",
                            Instructions = "Créez une fonction Power C# prenant en paramètre une base b de type float et un exposant e de type int. Power(b, e) retourne le float b exposant e.",
                            IsPublished = true,
                            LessonId = new Guid("9b5de29a-2216-4992-82c0-6b0b02cccc52"),
                            Position = 2,
                            Solution = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            Stub = "public class Exercice\n{\n  // Tapez votre code ici\n}\n",
                            Template = "// code-insertion-point\n\npublic class Test\n{\n    public static TestResult Ensure(float b, int exponent, float expected)\n    {\n      TestStatus status = TestStatus.Passed;\n      float actual = float.NaN;\n      try\n      {\n         actual = Exercice.Power(b, exponent);\n         if(Math.Abs(actual - expected) > 0.00001f)\n         {\n             status = TestStatus.Failed;\n         }\n      }\n      catch(Exception ex)\n      {\n         status = TestStatus.Inconclusive;\n      }\n\n      return new TestResult(\n        string.Format(\"Power of {0} by {1} should be {2}\", b, exponent, expected),\n        status,\n        status == TestStatus.Passed ? string.Empty : string.Format(\"Expected {0}. Got {1}.\", expected, actual)\n      );\n    }\n}\n\nreturn new TestResult[] {\n  Test.Ensure(2, 4, 16.0f),\n  Test.Ensure(2, -4, 1.0f/16.0f)\n};\n",
                            Title = "Calcul de puissance en C# v2"
                        },
                        new
                        {
                            ExerciseId = new Guid("edc48bbf-ef66-498e-9163-133aecde56f7"),
                            Difficulty = "Easy",
                            Instructions = "Créez une fonction Power C# prenant en paramètre une base b de type float et un exposant e de type int. Power(b, e) retourne le float b exposant e.",
                            IsPublished = true,
                            LessonId = new Guid("beb3c393-9c58-4d7d-a571-6b9a6fa8e3f8"),
                            Position = 1,
                            Solution = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            Stub = "public class Exercice\n{\n  // Tapez votre code ici\n}\n",
                            Template = "// code-insertion-point\n\npublic class Test\n{\n    public static TestResult Ensure(float b, int exponent, float expected)\n    {\n      TestStatus status = TestStatus.Passed;\n      float actual = float.NaN;\n      try\n      {\n         actual = Exercice.Power(b, exponent);\n         if(Math.Abs(actual - expected) > 0.00001f)\n         {\n             status = TestStatus.Failed;\n         }\n      }\n      catch(Exception ex)\n      {\n         status = TestStatus.Inconclusive;\n      }\n\n      return new TestResult(\n        string.Format(\"Power of {0} by {1} should be {2}\", b, exponent, expected),\n        status,\n        status == TestStatus.Passed ? string.Empty : string.Format(\"Expected {0}. Got {1}.\", expected, actual)\n      );\n    }\n}\n\nreturn new TestResult[] {\n  Test.Ensure(2, 4, 16.0f),\n  Test.Ensure(2, -4, 1.0f/16.0f)\n};\n",
                            Title = "Calcul de puissance en C# v3"
                        },
                        new
                        {
                            ExerciseId = new Guid("fcc5b251-4492-4f50-8842-51d13d2eb108"),
                            Difficulty = "Medium",
                            Instructions = "Créez une fonction Power C# prenant en paramètre une base b de type float et un exposant e de type int. Power(b, e) retourne le float b exposant e.",
                            IsPublished = true,
                            LessonId = new Guid("beb3c393-9c58-4d7d-a571-6b9a6fa8e3f8"),
                            Position = 2,
                            Solution = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            Stub = "public class Exercice\n{\n  // Tapez votre code ici\n}\n",
                            Template = "// code-insertion-point\n\npublic class Test\n{\n    public static TestResult Ensure(float b, int exponent, float expected)\n    {\n      TestStatus status = TestStatus.Passed;\n      float actual = float.NaN;\n      try\n      {\n         actual = Exercice.Power(b, exponent);\n         if(Math.Abs(actual - expected) > 0.00001f)\n         {\n             status = TestStatus.Failed;\n         }\n      }\n      catch(Exception ex)\n      {\n         status = TestStatus.Inconclusive;\n      }\n\n      return new TestResult(\n        string.Format(\"Power of {0} by {1} should be {2}\", b, exponent, expected),\n        status,\n        status == TestStatus.Passed ? string.Empty : string.Format(\"Expected {0}. Got {1}.\", expected, actual)\n      );\n    }\n}\n\nreturn new TestResult[] {\n  Test.Ensure(2, 4, 16.0f),\n  Test.Ensure(2, -4, 1.0f/16.0f)\n};\n",
                            Title = "Calcul de puissance en C# v4"
                        },
                        new
                        {
                            ExerciseId = new Guid("ec4e79f3-f907-4dcc-adbe-a82455b39889"),
                            Difficulty = "Hard",
                            Instructions = "Créez une fonction Power C# prenant en paramètre une base b de type float et un exposant e de type int. Power(b, e) retourne le float b exposant e.",
                            IsPublished = true,
                            LessonId = new Guid("beb3c393-9c58-4d7d-a571-6b9a6fa8e3f8"),
                            Position = 3,
                            Solution = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            Stub = "public class Exercice\n{\n  // Tapez votre code ici\n}\n",
                            Template = "// code-insertion-point\n\npublic class Test\n{\n    public static TestResult Ensure(float b, int exponent, float expected)\n    {\n      TestStatus status = TestStatus.Passed;\n      float actual = float.NaN;\n      try\n      {\n         actual = Exercice.Power(b, exponent);\n         if(Math.Abs(actual - expected) > 0.00001f)\n         {\n             status = TestStatus.Failed;\n         }\n      }\n      catch(Exception ex)\n      {\n         status = TestStatus.Inconclusive;\n      }\n\n      return new TestResult(\n        string.Format(\"Power of {0} by {1} should be {2}\", b, exponent, expected),\n        status,\n        status == TestStatus.Passed ? string.Empty : string.Format(\"Expected {0}. Got {1}.\", expected, actual)\n      );\n    }\n}\n\nreturn new TestResult[] {\n  Test.Ensure(2, 4, 16.0f),\n  Test.Ensure(2, -4, 1.0f/16.0f)\n};\n",
                            Title = "Calcul de puissance en C# v5"
                        },
                        new
                        {
                            ExerciseId = new Guid("4941040a-2ede-47a6-ac13-596676fdc33c"),
                            Difficulty = "Medium",
                            Instructions = "Créez une fonction Power C# prenant en paramètre une base b de type float et un exposant e de type int. Power(b, e) retourne le float b exposant e.",
                            IsPublished = true,
                            LessonId = new Guid("e1da2ee0-cc2f-4d4b-ad77-f5bbf612577e"),
                            Position = 1,
                            Solution = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            Stub = "public class Exercice\n{\n  // Tapez votre code ici\n}\n",
                            Template = "// code-insertion-point\n\npublic class Test\n{\n    public static TestResult Ensure(float b, int exponent, float expected)\n    {\n      TestStatus status = TestStatus.Passed;\n      float actual = float.NaN;\n      try\n      {\n         actual = Exercice.Power(b, exponent);\n         if(Math.Abs(actual - expected) > 0.00001f)\n         {\n             status = TestStatus.Failed;\n         }\n      }\n      catch(Exception ex)\n      {\n         status = TestStatus.Inconclusive;\n      }\n\n      return new TestResult(\n        string.Format(\"Power of {0} by {1} should be {2}\", b, exponent, expected),\n        status,\n        status == TestStatus.Passed ? string.Empty : string.Format(\"Expected {0}. Got {1}.\", expected, actual)\n      );\n    }\n}\n\nreturn new TestResult[] {\n  Test.Ensure(2, 4, 16.0f),\n  Test.Ensure(2, -4, 1.0f/16.0f)\n};\n",
                            Title = "Calcul de puissance en C# v6"
                        },
                        new
                        {
                            ExerciseId = new Guid("e019163d-076f-465a-bc4e-59af11cdd2b9"),
                            Difficulty = "Easy",
                            Instructions = "Créez une fonction Power C# prenant en paramètre une base b de type float et un exposant e de type int. Power(b, e) retourne le float b exposant e.",
                            IsPublished = true,
                            LessonId = new Guid("c80e3592-40e8-446b-9530-2acfb60f7a38"),
                            Position = 1,
                            Solution = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            Stub = "public class Exercice\n{\n  // Tapez votre code ici\n}\n",
                            Template = "// code-insertion-point\n\npublic class Test\n{\n    public static TestResult Ensure(float b, int exponent, float expected)\n    {\n      TestStatus status = TestStatus.Passed;\n      float actual = float.NaN;\n      try\n      {\n         actual = Exercice.Power(b, exponent);\n         if(Math.Abs(actual - expected) > 0.00001f)\n         {\n             status = TestStatus.Failed;\n         }\n      }\n      catch(Exception ex)\n      {\n         status = TestStatus.Inconclusive;\n      }\n\n      return new TestResult(\n        string.Format(\"Power of {0} by {1} should be {2}\", b, exponent, expected),\n        status,\n        status == TestStatus.Passed ? string.Empty : string.Format(\"Expected {0}. Got {1}.\", expected, actual)\n      );\n    }\n}\n\nreturn new TestResult[] {\n  Test.Ensure(2, 4, 16.0f),\n  Test.Ensure(2, -4, 1.0f/16.0f)\n};\n",
                            Title = "Calcul de puissance en C# v7"
                        },
                        new
                        {
                            ExerciseId = new Guid("7eeb5b33-2776-48d2-ae51-fed8cac1a117"),
                            Difficulty = "Medium",
                            Instructions = "Créez une fonction Power C# prenant en paramètre une base b de type float et un exposant e de type int. Power(b, e) retourne le float b exposant e.",
                            IsPublished = true,
                            LessonId = new Guid("c80e3592-40e8-446b-9530-2acfb60f7a38"),
                            Position = 2,
                            Solution = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            Stub = "public class Exercice\n{\n  // Tapez votre code ici\n}\n",
                            Template = "// code-insertion-point\n\npublic class Test\n{\n    public static TestResult Ensure(float b, int exponent, float expected)\n    {\n      TestStatus status = TestStatus.Passed;\n      float actual = float.NaN;\n      try\n      {\n         actual = Exercice.Power(b, exponent);\n         if(Math.Abs(actual - expected) > 0.00001f)\n         {\n             status = TestStatus.Failed;\n         }\n      }\n      catch(Exception ex)\n      {\n         status = TestStatus.Inconclusive;\n      }\n\n      return new TestResult(\n        string.Format(\"Power of {0} by {1} should be {2}\", b, exponent, expected),\n        status,\n        status == TestStatus.Passed ? string.Empty : string.Format(\"Expected {0}. Got {1}.\", expected, actual)\n      );\n    }\n}\n\nreturn new TestResult[] {\n  Test.Ensure(2, 4, 16.0f),\n  Test.Ensure(2, -4, 1.0f/16.0f)\n};\n",
                            Title = "Calcul de puissance en C# v8"
                        },
                        new
                        {
                            ExerciseId = new Guid("d8b81be3-ef9d-4f56-b565-a2d7d7946081"),
                            Difficulty = "Medium",
                            Instructions = "Créez une fonction Power C# prenant en paramètre une base b de type float et un exposant e de type int. Power(b, e) retourne le float b exposant e.",
                            IsPublished = true,
                            LessonId = new Guid("c80e3592-40e8-446b-9530-2acfb60f7a38"),
                            Position = 3,
                            Solution = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            Stub = "public class Exercice\n{\n  // Tapez votre code ici\n}\n",
                            Template = "// code-insertion-point\n\npublic class Test\n{\n    public static TestResult Ensure(float b, int exponent, float expected)\n    {\n      TestStatus status = TestStatus.Passed;\n      float actual = float.NaN;\n      try\n      {\n         actual = Exercice.Power(b, exponent);\n         if(Math.Abs(actual - expected) > 0.00001f)\n         {\n             status = TestStatus.Failed;\n         }\n      }\n      catch(Exception ex)\n      {\n         status = TestStatus.Inconclusive;\n      }\n\n      return new TestResult(\n        string.Format(\"Power of {0} by {1} should be {2}\", b, exponent, expected),\n        status,\n        status == TestStatus.Passed ? string.Empty : string.Format(\"Expected {0}. Got {1}.\", expected, actual)\n      );\n    }\n}\n\nreturn new TestResult[] {\n  Test.Ensure(2, 4, 16.0f),\n  Test.Ensure(2, -4, 1.0f/16.0f)\n};\n",
                            Title = "Calcul de puissance en C# v9"
                        },
                        new
                        {
                            ExerciseId = new Guid("36460812-6008-42f4-8032-add056ebf0a6"),
                            Difficulty = "Hard",
                            Instructions = "Créez une fonction Power C# prenant en paramètre une base b de type float et un exposant e de type int. Power(b, e) retourne le float b exposant e.",
                            IsPublished = true,
                            LessonId = new Guid("c80e3592-40e8-446b-9530-2acfb60f7a38"),
                            Position = 4,
                            Solution = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            Stub = "public class Exercice\n{\n  // Tapez votre code ici\n}\n",
                            Template = "// code-insertion-point\n\npublic class Test\n{\n    public static TestResult Ensure(float b, int exponent, float expected)\n    {\n      TestStatus status = TestStatus.Passed;\n      float actual = float.NaN;\n      try\n      {\n         actual = Exercice.Power(b, exponent);\n         if(Math.Abs(actual - expected) > 0.00001f)\n         {\n             status = TestStatus.Failed;\n         }\n      }\n      catch(Exception ex)\n      {\n         status = TestStatus.Inconclusive;\n      }\n\n      return new TestResult(\n        string.Format(\"Power of {0} by {1} should be {2}\", b, exponent, expected),\n        status,\n        status == TestStatus.Passed ? string.Empty : string.Format(\"Expected {0}. Got {1}.\", expected, actual)\n      );\n    }\n}\n\nreturn new TestResult[] {\n  Test.Ensure(2, 4, 16.0f),\n  Test.Ensure(2, -4, 1.0f/16.0f)\n};\n",
                            Title = "Calcul de puissance en C# v10"
                        });
                });

            modelBuilder.Entity("Puroguramu.Infrastructures.Data.EntityExerciseAttempt", b =>
                {
                    b.Property<Guid>("AttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AttemptTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExerciseStatus")
                        .HasColumnType("int");

                    b.Property<string>("Proposal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttemptId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("StudentId");

                    b.ToTable("ExerciseAttempts");

                    b.HasData(
                        new
                        {
                            AttemptId = new Guid("2ccfd519-9925-442d-a988-1650f99b1076"),
                            AttemptTime = new DateTime(2024, 8, 7, 12, 30, 36, 759, DateTimeKind.Local).AddTicks(2576),
                            ExerciseId = new Guid("8566b6d9-1460-4517-b378-5eb763b1a11c"),
                            ExerciseStatus = 3,
                            Proposal = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            StudentId = "MSI25-06-24 23:48:00Maxime"
                        },
                        new
                        {
                            AttemptId = new Guid("0385cc18-cc16-4cea-9567-356bf22f9194"),
                            AttemptTime = new DateTime(2024, 8, 7, 12, 30, 36, 759, DateTimeKind.Local).AddTicks(2857),
                            ExerciseId = new Guid("edc48bbf-ef66-498e-9163-133aecde56f7"),
                            ExerciseStatus = 3,
                            Proposal = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            StudentId = "MSI25-06-24 23:48:00Maxime"
                        },
                        new
                        {
                            AttemptId = new Guid("16b92fef-19ed-44ac-a602-0f7ff3d8be99"),
                            AttemptTime = new DateTime(2024, 8, 7, 12, 30, 36, 759, DateTimeKind.Local).AddTicks(2863),
                            ExerciseId = new Guid("fcc5b251-4492-4f50-8842-51d13d2eb108"),
                            ExerciseStatus = 3,
                            Proposal = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            StudentId = "MSI25-06-24 23:48:00Maxime"
                        },
                        new
                        {
                            AttemptId = new Guid("94ecc30b-f54f-4939-86d8-b5d308d25702"),
                            AttemptTime = new DateTime(2024, 8, 7, 12, 30, 36, 759, DateTimeKind.Local).AddTicks(2873),
                            ExerciseId = new Guid("ec4e79f3-f907-4dcc-adbe-a82455b39889"),
                            ExerciseStatus = 3,
                            Proposal = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            StudentId = "MSI25-06-24 23:48:00Maxime"
                        },
                        new
                        {
                            AttemptId = new Guid("a72bf326-dd03-4f2f-9e0e-585eb69c836b"),
                            AttemptTime = new DateTime(2024, 8, 7, 12, 30, 36, 759, DateTimeKind.Local).AddTicks(2878),
                            ExerciseId = new Guid("e019163d-076f-465a-bc4e-59af11cdd2b9"),
                            ExerciseStatus = 3,
                            Proposal = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            StudentId = "MSI25-06-24 23:48:00Maxime"
                        },
                        new
                        {
                            AttemptId = new Guid("531be782-a0d1-4c6c-9a22-633f533a2b9a"),
                            AttemptTime = new DateTime(2024, 8, 7, 12, 30, 36, 759, DateTimeKind.Local).AddTicks(2882),
                            ExerciseId = new Guid("7eeb5b33-2776-48d2-ae51-fed8cac1a117"),
                            ExerciseStatus = 2,
                            Proposal = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return 1.0f;\n    }\n}\n",
                            StudentId = "MSI25-06-24 23:48:00Maxime"
                        },
                        new
                        {
                            AttemptId = new Guid("7af6d338-c4be-4cc2-8b6b-ddd74bb11553"),
                            AttemptTime = new DateTime(2024, 8, 7, 12, 30, 36, 759, DateTimeKind.Local).AddTicks(2886),
                            ExerciseId = new Guid("8566b6d9-1460-4517-b378-5eb763b1a11c"),
                            ExerciseStatus = 2,
                            Proposal = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return 1.0f;\n    }\n}\n",
                            StudentId = "MSI25-06-24 23:48:00Megan"
                        },
                        new
                        {
                            AttemptId = new Guid("7c207469-e108-4e84-a13b-c6fa59a7cad6"),
                            AttemptTime = new DateTime(2024, 8, 7, 12, 30, 36, 759, DateTimeKind.Local).AddTicks(2890),
                            ExerciseId = new Guid("edc48bbf-ef66-498e-9163-133aecde56f7"),
                            ExerciseStatus = 3,
                            Proposal = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            StudentId = "MSI25-06-24 23:48:00Megan"
                        },
                        new
                        {
                            AttemptId = new Guid("47d1fbfe-2614-403a-b8a3-3f8fbb8125b8"),
                            AttemptTime = new DateTime(2024, 8, 7, 12, 30, 36, 759, DateTimeKind.Local).AddTicks(2895),
                            ExerciseId = new Guid("7eeb5b33-2776-48d2-ae51-fed8cac1a117"),
                            ExerciseStatus = 3,
                            Proposal = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            StudentId = "MSI25-06-24 23:48:00Megan"
                        },
                        new
                        {
                            AttemptId = new Guid("90fd61c7-79f3-4b34-9a46-bbc763164134"),
                            AttemptTime = new DateTime(2024, 8, 7, 12, 30, 36, 759, DateTimeKind.Local).AddTicks(2899),
                            ExerciseId = new Guid("d8b81be3-ef9d-4f56-b565-a2d7d7946081"),
                            ExerciseStatus = 3,
                            Proposal = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return (float)Math.Pow(b, e);\n    }\n}\n",
                            StudentId = "MSI25-06-24 23:48:00Megan"
                        },
                        new
                        {
                            AttemptId = new Guid("d072ac27-7d77-4d28-8b56-b6453a01922b"),
                            AttemptTime = new DateTime(2024, 8, 7, 12, 30, 36, 759, DateTimeKind.Local).AddTicks(2903),
                            ExerciseId = new Guid("36460812-6008-42f4-8032-add056ebf0a6"),
                            ExerciseStatus = 2,
                            Proposal = "public class Exercice\n{\n    public static float Power(float b, int e)\n    {\n        return 1.0f;\n    }\n}\n",
                            StudentId = "MSI25-06-24 23:48:00Megan"
                        });
                });

            modelBuilder.Entity("Puroguramu.Infrastructures.Data.EntityGroupLab", b =>
                {
                    b.Property<Guid>("IdGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdGroup");

                    b.HasIndex("GroupName")
                        .IsUnique();

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            IdGroup = new Guid("dbae745e-0565-4228-8df8-23026243157f"),
                            GroupName = "2i1"
                        },
                        new
                        {
                            IdGroup = new Guid("b72ab3e2-d0d8-4521-8c3e-58074a5cceb9"),
                            GroupName = "2i2"
                        },
                        new
                        {
                            IdGroup = new Guid("0092cae5-23fb-458a-bd67-21764203695f"),
                            GroupName = "2i3"
                        },
                        new
                        {
                            IdGroup = new Guid("57c96a00-e9f5-450e-b23f-5aaec0b737dc"),
                            GroupName = "2i4"
                        });
                });

            modelBuilder.Entity("Puroguramu.Infrastructures.Data.EntityLesson", b =>
                {
                    b.Property<Guid>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LessonId");

                    b.HasIndex("Position")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            LessonId = new Guid("9b5de29a-2216-4992-82c0-6b0b02cccc52"),
                            Description = "Ceci est la description de mon incroyable leçon v1",
                            IsPublished = true,
                            Position = 1,
                            Title = "Mon incroyable leçon v1"
                        },
                        new
                        {
                            LessonId = new Guid("beb3c393-9c58-4d7d-a571-6b9a6fa8e3f8"),
                            Description = "Ceci est la description de mon incroyable leçon v2",
                            IsPublished = true,
                            Position = 2,
                            Title = "Mon incroyable leçon v2"
                        },
                        new
                        {
                            LessonId = new Guid("e1da2ee0-cc2f-4d4b-ad77-f5bbf612577e"),
                            Description = "Ceci est la description de mon incroyable leçon v3",
                            IsPublished = true,
                            Position = 3,
                            Title = "Mon incroyable leçon v3"
                        },
                        new
                        {
                            LessonId = new Guid("c80e3592-40e8-446b-9530-2acfb60f7a38"),
                            Description = "Ceci est la description de mon incroyable leçon v4",
                            IsPublished = true,
                            Position = 4,
                            Title = "Mon incroyable leçon v4"
                        });
                });

            modelBuilder.Entity("Puroguramu.Infrastructures.Data.IdentitySchoolMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Matricule")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nchar(7)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Matricule")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentitySchoolMember");
                });

            modelBuilder.Entity("Puroguramu.Infrastructures.Data.IdentityStudent", b =>
                {
                    b.HasBaseType("Puroguramu.Infrastructures.Data.IdentitySchoolMember");

                    b.Property<Guid>("LabGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("LabGroupId");

                    b.HasDiscriminator().HasValue("IdentityStudent");

                    b.HasData(
                        new
                        {
                            Id = "MSI25-06-24 23:48:00Maxime",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90427301-3d98-40aa-aae8-96c8f43b65fe",
                            Email = "m.cao@student.helmo.be",
                            EmailConfirmed = true,
                            FirstName = "Maxime",
                            LockoutEnabled = false,
                            Matricule = "d170051",
                            Name = "Cao",
                            NormalizedEmail = "M.CAO@STUDENT.HELMO.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEHHL/hETC8UxLJwUaegs3a9nsXmdx5FcmvBOfSipbtJ1JViIwg8u2UnN+B/WaGdzyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "153670d3-38ba-4570-a146-1d9bc48cbd64",
                            TwoFactorEnabled = false,
                            UserName = "m.cao@student.helmo.be",
                            LabGroupId = new Guid("dbae745e-0565-4228-8df8-23026243157f")
                        },
                        new
                        {
                            Id = "MSI25-06-24 23:48:00Megan",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f2267f3-4bee-48c2-ae6e-da841a0556fd",
                            Email = "m.levieux@student.helmo.be",
                            EmailConfirmed = true,
                            FirstName = "Megan",
                            LockoutEnabled = false,
                            Matricule = "d170000",
                            Name = "Levieux",
                            NormalizedEmail = "M.LEVIEUX@STUDENT.HELMO.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEOUWKtknS7cVUJkkbh1EPzRkhIqlNuOI1A07TSp44GLQgyszJWFG0m69dYYPyFCqFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3865fb17-88d0-4f36-b383-2e24c9c97454",
                            TwoFactorEnabled = false,
                            UserName = "m.levieux@student.helmo.be",
                            LabGroupId = new Guid("b72ab3e2-d0d8-4521-8c3e-58074a5cceb9")
                        });
                });

            modelBuilder.Entity("Puroguramu.Infrastructures.Data.IdentityTeacher", b =>
                {
                    b.HasBaseType("Puroguramu.Infrastructures.Data.IdentitySchoolMember");

                    b.HasDiscriminator().HasValue("IdentityTeacher");

                    b.HasData(
                        new
                        {
                            Id = "MSI25-06-24 23:48:00Nicolas",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffa29c2e-eec5-4431-a6c7-ccf67ff0a375",
                            Email = "n.hendrikx@helmo.be",
                            EmailConfirmed = true,
                            FirstName = "Nicolas",
                            LockoutEnabled = false,
                            Matricule = "p070039",
                            Name = "Hendrikx",
                            NormalizedEmail = "N.HENDRIKX@HELMO.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEB76QqrnWgokxUtxsOrSqIw05aM9IPNmQZsTgtvG7sMJIbM2gGnMrepaal1r3FQvpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7ff7b6d-b44d-4ea1-91a5-f79e21d5bbd1",
                            TwoFactorEnabled = false,
                            UserName = "n.hendrikx@helmo.be"
                        },
                        new
                        {
                            Id = "MSI25-06-24 23:48:00Dorian",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35513f4d-8a97-4a7a-8f13-ea73e8971a2a",
                            Email = "d.lauwers@helmo.be",
                            EmailConfirmed = true,
                            FirstName = "Dorian",
                            LockoutEnabled = false,
                            Matricule = "p180039",
                            Name = "Lauwers",
                            NormalizedEmail = "D.LAUWERS@HELMO.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEDL7Zm+1AKGhBniPKQb4mCRICbsbngyd6484JDWd/BImiSU8awhv7ne2B2ew1GUsGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0657f90-9e49-4463-8a0e-33863c879f84",
                            TwoFactorEnabled = false,
                            UserName = "d.lauwers@helmo.be"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Puroguramu.Infrastructures.Data.IdentitySchoolMember", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Puroguramu.Infrastructures.Data.IdentitySchoolMember", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Puroguramu.Infrastructures.Data.IdentitySchoolMember", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Puroguramu.Infrastructures.Data.IdentitySchoolMember", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Puroguramu.Infrastructures.Data.EntityExercise", b =>
                {
                    b.HasOne("Puroguramu.Infrastructures.Data.EntityLesson", "Lesson")
                        .WithMany("Exercises")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Puroguramu.Infrastructures.Data.EntityExerciseAttempt", b =>
                {
                    b.HasOne("Puroguramu.Infrastructures.Data.EntityExercise", "Exercise")
                        .WithMany("ExerciseAttempts")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Puroguramu.Infrastructures.Data.IdentityStudent", "Student")
                        .WithMany("ExerciseAttempts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Puroguramu.Infrastructures.Data.IdentityStudent", b =>
                {
                    b.HasOne("Puroguramu.Infrastructures.Data.EntityGroupLab", "LabGroup")
                        .WithMany("Members")
                        .HasForeignKey("LabGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabGroup");
                });

            modelBuilder.Entity("Puroguramu.Infrastructures.Data.EntityExercise", b =>
                {
                    b.Navigation("ExerciseAttempts");
                });

            modelBuilder.Entity("Puroguramu.Infrastructures.Data.EntityGroupLab", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Puroguramu.Infrastructures.Data.EntityLesson", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("Puroguramu.Infrastructures.Data.IdentityStudent", b =>
                {
                    b.Navigation("ExerciseAttempts");
                });
#pragma warning restore 612, 618
        }
    }
}
